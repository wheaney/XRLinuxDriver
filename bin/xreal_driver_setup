#!/usr/bin/env bash

# exit when any command fails
set -e

# Make sure only root can run our script
if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

# If we're on Steam Deck, check if the file system is readonly, if so, disable readonly and store the state to re-enable later
steam_deck_readonly_fs=false
if command -v steamos-readonly &> /dev/null; then
  if steamos-readonly status | grep -q "enabled"; then
    steam_deck_readonly_fs=true
    echo "Disabling readonly SteamOS partition"
    steamos-readonly disable
  fi
fi


if ! lsmod | grep -q uinput; then
  echo "Setting up uinput kernel module"
  modprobe uinput
fi

# create temp directory
tmp_dir=$(mktemp -d -t xreal-air-XXXXXXXXXX)
pushd $tmp_dir > /dev/null
echo "Created temp directory: ${tmp_dir}"

if [ -z "$1" ]
then
  # download and unzip the latest driver
  echo "Downloading latest release to: ${tmp_dir}/xrealAirLinuxDriver.tar.gz"
  curl -L -O https://github.com/wheaney/xrealAirLinuxDriver/releases/latest/download/xrealAirLinuxDriver.tar.gz
else
  cp $1 $tmp_dir
fi

echo "Extracting to: ${tmp_dir}/driver_air_glasses"
tar -xf xrealAirLinuxDriver.tar.gz

pushd driver_air_glasses > /dev/null
UDEV_FILE=/etc/udev/rules.d/60-xreal-air.rules
if test -f "$UDEV_FILE"; then
  rm $UDEV_FILE
fi

echo "Copying udev file to ${UDEV_FILE}"
USER=${SUDO_USER:-$USER}
USER_HOME=$(getent passwd $USER | cut -d: -f6)

# escaping sed replace: https://stackoverflow.com/questions/407523/escape-a-string-for-a-sed-replace-pattern
ESCAPED_USER_HOME=$(printf '%s\n' "$USER_HOME" | sed -e 's/[\/&]/\\&/g')
sed -i -e "s/{user_home}/$ESCAPED_USER_HOME/g" -e "s/{user}/$USER/g" udev/60-xreal-air.rules

cp udev/60-xreal-air.rules $UDEV_FILE
udevadm control --reload
udevadm trigger

echo "Copying scripts to ${USER_HOME}/bin"
if test ! -d "$USER_HOME/bin"; then
  mkdir $USER_HOME/bin
fi
cp xreal_driver_config $USER_HOME/bin

echo "Setting up the systemd service"
# check if the systemd service is already running from a previous install
if systemctl is-active --quiet xreal-air-driver; then
  systemctl stop xreal-air-driver
fi

cp xrealAirLinuxDriver /usr/bin
chmod 755 /usr/bin/xrealAirLinuxDriver

sed -i -e "s/{user_home}/$ESCAPED_USER_HOME/g" -e "s/{user}/$USER/g" systemd/xreal-air-driver.service
cp systemd/xreal-air-driver.service /etc/systemd/system
chmod 644 /etc/systemd/system/xreal-air-driver.service
systemctl daemon-reload
systemctl start xreal-air-driver

# check if systemd startup was successful
if ! systemctl is-active --quiet xreal-air-driver; then
  echo "systemd startup failed"
  exit 1
fi

# set it to run on startup
systemctl enable xreal-air-driver

echo "Deleting temp directory: ${tmp_dir}"
rm -rf $tmp_dir
cd "$(dirs -l -0)" && dirs -c

# If we disabled the Steam Deck readonly file system, re-enable it
if $steam_deck_readonly_fs; then
  echo "Re-enabling readonly SteamOS partition"
  steamos-readonly enable
fi

