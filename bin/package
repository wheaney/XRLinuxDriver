#!/usr/bin/env bash

# exit when any command fails
set -e

USER=${SUDO_USER:-$USER}
GROUP=$(id -gn $USER)

source bin/inject_ua

if [ -z "$UA_API_SECRET" ] && [ -z "$UA_API_SECRET_INTENTIONALLY_EMPTY" ]; then
  echo "UA_API_SECRET isn't set. If this is intentional, set UA_API_SECRET_INTENTIONALLY_EMPTY to a non-empty value."
  exit 1
fi

ARCH=$(uname -m)
echo "Building for $ARCH"

# build the driver
BUILD_PATH=build
if [ ! -d "$BUILD_PATH" ]; then
  mkdir $BUILD_PATH
fi

pushd $BUILD_PATH
cmake ..
make

# create package
PACKAGE_DIR=xr_driver
PACKAGE_BIN_DIR=$PACKAGE_DIR/bin
PACKAGE_USER_BIN_DIR=$PACKAGE_BIN_DIR/user
mkdir -p $PACKAGE_USER_BIN_DIR

mv xrDriver $PACKAGE_BIN_DIR

# copy setup and user-relevant scripts
copy_and_inject_ua "../bin/ua.sh" "$PACKAGE_DIR" "../bin/setup"
copy_and_inject_ua "../bin/ua.sh" "$PACKAGE_BIN_DIR" "../bin/xr_driver_verify" "../bin/xr_driver_cli" "../bin/xr_driver_uninstall"
copy_and_inject_ua "../bin/ua.sh" "$PACKAGE_USER_BIN_DIR" "../bin/user/install" "../bin/user/systemd_start"

# copy the systemd files needed to run our service
cp -r ../systemd $PACKAGE_DIR
cp -r ../udev $PACKAGE_DIR

# copy the shared library files
if [ ! -d "$PACKAGE_DIR/lib" ]; then
  mkdir $PACKAGE_DIR/lib
fi
cp ../lib/$ARCH/*.so $PACKAGE_DIR/lib || true

# create manifest file for verifying installed file checksums against the originally packaged versions
# include any file that doesn't get modified during setup (e.g. the systemd service file)
pushd $PACKAGE_BIN_DIR
BIN_MANIFEST=$(sha256sum xrDriver xr_driver_cli xr_driver_uninstall)
popd
echo $BIN_MANIFEST > $PACKAGE_DIR/manifest

# bundle up the driver directory
tar -zcvf xrDriver-$ARCH.tar.gz $PACKAGE_DIR

popd

mkdir -p out
cp $BUILD_PATH/xrDriver-$ARCH.tar.gz out/

rm -rf $BUILD_PATH