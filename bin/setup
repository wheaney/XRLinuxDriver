#!/usr/bin/env bash

set -e

# This script gets packaged with the release and should do the bulk of the setup work. This allows this setup to be tied
# to a specific release of the code, and guarantees it will never run along-side newer or older binaries.

# Make sure only root can run our script
if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

# some distros don't have systemd enabled by default, check this first
if [[ $(ps -p 1 -o comm=) != "systemd" ]]; then
  echo "systemd is required for this installation. Please enable it, then rerun the setup."
  exit 1
fi

if ! find /usr/lib* -name 'libcurl.so*' -print -quit | grep -q .; then
  echo "The libcurl library is not found. It's typically provided by the package libcurl4 (Debian/Ubuntu), libcurl (Fedora), or curl (Arch). \
        Please install it and rerun setup."
  exit 1
fi

USER=${SUDO_USER:-$USER}
GROUP=$(id -gn $USER)
USER_HOME=$(getent passwd $USER | cut -d: -f6)

function create_and_chown() {
  if [ ! -d "$1" ]; then
    mkdir -p $1
  fi

  # XDG dir can be provided as the second argument, we want to make sure it's owned by the user
  # but don't recursively chown it since other programs may put files in there
  if [ -n "$2" ]; then
    chown $USER:$GROUP $2
  fi

  # only recursively chown the directory if it's not an XDG dir
  if [ -z "$2" ] || [ "$1" != "$2" ]; then
    chown -R $USER:$GROUP $1
  fi
}

if [ -z "$XDG_DATA_HOME" ]; then
  XDG_DATA_HOME="$USER_HOME/.local/share"
fi
SYSTEMD_DATA_DIR="$XDG_DATA_HOME/systemd"
SYSTEMD_USER_DIR="$SYSTEMD_DATA_DIR/user"
mkdir -p $SYSTEMD_USER_DIR # this will get chowned by the recursive call triggered next
create_and_chown $SYSTEMD_DATA_DIR $XDG_DATA_HOME

DATA_DIR="$XDG_DATA_HOME/xr_driver"
create_and_chown $DATA_DIR $XDG_DATA_HOME

if [ -z "$XDG_CONFIG_HOME" ]; then
  XDG_CONFIG_HOME="$USER_HOME/.config"
fi
CONFIG_DIR="$XDG_CONFIG_HOME/xr_driver"
create_and_chown $CONFIG_DIR $XDG_CONFIG_HOME

if [ -z "$XDG_BIN_HOME" ]; then
  XDG_BIN_HOME="$USER_HOME/.local/bin"
fi
OLD_BIN_DIR="$USER_HOME/bin"
BIN_DIR="$XDG_BIN_HOME"
create_and_chown $OLD_BIN_DIR
create_and_chown $BIN_DIR $XDG_BIN_HOME

if [ -z "$XDG_STATE_HOME" ]; then
  XDG_STATE_HOME="$USER_HOME/.local/state"
fi
STATE_DIR="$XDG_STATE_HOME/xr_driver"
create_and_chown $STATE_DIR $XDG_STATE_HOME

if [ -e "$OLD_BIN_DIR/xreal_driver_uninstall" ]; then
  echo "Cleaning up the previous installation"

  # ` || true` will ensure that this can't cause a failure, even with `set -e`
  $OLD_BIN_DIR/xreal_driver_uninstall --for-install || true

  UA_EVENT_NAME="update"
fi

if [ -e "$BIN_DIR/xr_driver_uninstall" ]; then
  echo "Cleaning up the previous installation"

  # ` || true` will ensure that this can't cause a failure, even with `set -e`
  $BIN_DIR/xr_driver_uninstall --for-install || true

  UA_EVENT_NAME="update"
fi

current_path=$(pwd)
if [[ "$current_path" == /tmp/* ]]; then
  target_dir=$(echo "$current_path" | sed -E 's|^(/tmp/[^/]+).*|\1|')
  echo "Changing ownership of $target_dir to $USER:$GROUP"
  chown -R $USER:$GROUP "$target_dir"
fi

# this part of the setup should be run as the user, not root
export XDG_RUNTIME_DIR=/run/user/$(id -u $USER)
su -c "XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR $(realpath bin/user/install)" $USER

###############################
### BEGIN sudo required section

# if steamos is detected, we need to install the udev rules to /etc since /usr is on the readonly FS
UDEV_RULES_DIR="/usr/lib/udev/rules.d"
UDEV_RULES_DIR_CHANGED=0
if [ -f /etc/os-release ]; then
  . /etc/os-release
  if [ "$ID" == "steamos" ]; then
    UDEV_RULES_DIR="/etc/udev/rules.d"
    UDEV_RULES_DIR_CHANGED=1
  fi
fi

if [ $UDEV_RULES_DIR_CHANGED -eq 0 ]; then
  if touch "$UDEV_RULES_DIR/100-xr-driver-test-rule" 2>/dev/null; then
    rm "$UDEV_RULES_DIR/100-xr-driver-test-rule"
  else 
    UDEV_RULES_DIR="/etc/udev/rules.d"
  fi
fi

mkdir -p $UDEV_RULES_DIR

echo "Copying the udev rules to ${UDEV_RULES_DIR}"
cp udev/* $UDEV_RULES_DIR

udevadm control --reload-rules
udevadm trigger

# remove temporary files that may be left behind, sometimes they cause problems
rm -f /tmp/shader_runtime_*
rm -f /dev/shm/xr_*
rm -f /dev/shm/breezy_desktop_imu

### END sudo required section
###############################

# this part of the setup should be run as the user, not root
su -l -c "XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR $(realpath bin/user/systemd_start)" $USER

###############################
### BEGIN sudo required section

# Ensure the user service persists after logout
loginctl enable-linger $USER

### END sudo required section
###############################