#!/usr/bin/env bash

set -e

# This script gets packaged with the release and should do the bulk of the setup work. This allows this setup to be tied
# to a specific release of the code, and guarantees it will never run along-side newer or older binaries.

# some distros don't have systemd enabled by default, check this first
if [[ $(ps -p 1 -o comm=) != "systemd" ]]; then
  echo "systemd is required for this installation. Please enable it, then retry."
  exit 1
fi

USER=${SUDO_USER:-$USER}
USER_HOME=$(getent passwd $USER | cut -d: -f6)
UA_EVENT_NAME="install"
if [ -e "$USER_HOME/bin/xreal_driver_uninstall" ]; then
  echo "Cleaning up the previous installation"

  # ` || true` will ensure that this can't cause a failure, even with `set -e`
  $USER_HOME/bin/xreal_driver_uninstall --for-install || true

  UA_EVENT_NAME="update"
fi

UA_CLIENT_ID="ARLinuxDriver"
UA_EVENT_VERSION="$1"
#INJECT_UA_CALL

if [ -e "$USER_HOME/.xreal_driver_config" ]; then
  # replace the legacy "use_joystick" config
  sed -i 's/use_joystick=true/output_mode=joystick/g' "$USER_HOME/.xreal_driver_config"
  sed -i 's/use_joystick=false/output_mode=mouse/g' "$USER_HOME/.xreal_driver_config"
fi

if ! lsmod | grep -q uinput; then
  echo "Setting up uinput kernel module"
  modprobe uinput
fi

echo "Copying driver binary and scripts to ${USER_HOME}/bin"
if [ ! -d "$USER_HOME/bin" ]; then
  mkdir $USER_HOME/bin
fi
cp xrealAirLinuxDriver $USER_HOME/bin
cp xreal_driver_config $USER_HOME/bin
cp xreal_driver_uninstall $USER_HOME/bin

# escaping sed replace: https://stackoverflow.com/questions/407523/escape-a-string-for-a-sed-replace-pattern
ESCAPED_USER_HOME=$(printf '%s\n' "$USER_HOME" | sed -e 's/[\/&]/\\&/g')

echo "Copying the verification script and manifest to ${USER_HOME}/.local/bin/xr_driver"
sed -i -e "s/{user_home}/$ESCAPED_USER_HOME/g" verify_installation
if [ ! -d "$USER_HOME/.local/bin/xr_driver" ]; then
  mkdir -p $USER_HOME/.local/bin/xr_driver
fi
cp -p verify_installation $USER_HOME/.local/bin/xr_driver
cp manifest $USER_HOME/.local/bin/xr_driver

echo "Setting up the systemd service"
# check if the systemd service is already running from a previous install
if systemctl is-active --quiet xreal-air-driver; then
  systemctl stop xreal-air-driver
fi

sed -i -e "s/{user_home}/$ESCAPED_USER_HOME/g" -e "s/{user}/$USER/g" systemd/xreal-air-driver.service
cp systemd/xreal-air-driver.service /etc/systemd/system
chmod 644 /etc/systemd/system/xreal-air-driver.service
systemctl daemon-reload
systemctl start xreal-air-driver

# check if systemd startup was successful
if ! systemctl is-active --quiet xreal-air-driver; then
  echo "systemd startup failed"
  exit 1
fi

# set it to run on startup
systemctl enable xreal-air-driver