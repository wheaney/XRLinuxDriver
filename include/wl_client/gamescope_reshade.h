/* Generated by wayland-scanner 1.23.0 */

#ifndef GAMESCOPE_RESHADE_CLIENT_PROTOCOL_H
#define GAMESCOPE_RESHADE_CLIENT_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-client.h"

#ifdef  __cplusplus
extern "C" {
#endif

/**
 * @page page_gamescope_reshade The gamescope_reshade protocol
 * gamescope-specific reshade integration
 *
 * @section page_desc_gamescope_reshade Description
 *
 * This protocol allows applications to load and interact with a reshade FX shader in gamescope.
 *
 * @section page_ifaces_gamescope_reshade Interfaces
 * - @subpage page_iface_gamescope_reshade - 
 * @section page_copyright_gamescope_reshade Copyright
 * <pre>
 *
 * Copyright Â© 2024 Wayne Heaney
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 * </pre>
 */
struct gamescope_reshade;

#ifndef GAMESCOPE_RESHADE_INTERFACE
#define GAMESCOPE_RESHADE_INTERFACE
/**
 * @page page_iface_gamescope_reshade gamescope_reshade
 * @section page_iface_gamescope_reshade_api API
 * See @ref iface_gamescope_reshade.
 */
/**
 * @defgroup iface_gamescope_reshade The gamescope_reshade interface
 */
extern const struct wl_interface gamescope_reshade_interface;
#endif

/**
 * @ingroup iface_gamescope_reshade
 * @struct gamescope_reshade_listener
 */
struct gamescope_reshade_listener {
	/**
	 * alerts when the requested effect is ready
	 *
	 * This event alerts the client when an effect has been enabled.
	 * @param effect_path Path to the FX file
	 */
	void (*effect_ready)(void *data,
			     struct gamescope_reshade *gamescope_reshade,
			     const char *effect_path);
};

/**
 * @ingroup iface_gamescope_reshade
 */
static inline int
gamescope_reshade_add_listener(struct gamescope_reshade *gamescope_reshade,
			       const struct gamescope_reshade_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) gamescope_reshade,
				     (void (**)(void)) listener, data);
}

#define GAMESCOPE_RESHADE_DESTROY 0
#define GAMESCOPE_RESHADE_SET_EFFECT 1
#define GAMESCOPE_RESHADE_ENABLE_EFFECT 2
#define GAMESCOPE_RESHADE_SET_UNIFORM_VARIABLE 3
#define GAMESCOPE_RESHADE_DISABLE_EFFECT 4

/**
 * @ingroup iface_gamescope_reshade
 */
#define GAMESCOPE_RESHADE_EFFECT_READY_SINCE_VERSION 1

/**
 * @ingroup iface_gamescope_reshade
 */
#define GAMESCOPE_RESHADE_DESTROY_SINCE_VERSION 1
/**
 * @ingroup iface_gamescope_reshade
 */
#define GAMESCOPE_RESHADE_SET_EFFECT_SINCE_VERSION 1
/**
 * @ingroup iface_gamescope_reshade
 */
#define GAMESCOPE_RESHADE_ENABLE_EFFECT_SINCE_VERSION 1
/**
 * @ingroup iface_gamescope_reshade
 */
#define GAMESCOPE_RESHADE_SET_UNIFORM_VARIABLE_SINCE_VERSION 1
/**
 * @ingroup iface_gamescope_reshade
 */
#define GAMESCOPE_RESHADE_DISABLE_EFFECT_SINCE_VERSION 1

/** @ingroup iface_gamescope_reshade */
static inline void
gamescope_reshade_set_user_data(struct gamescope_reshade *gamescope_reshade, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) gamescope_reshade, user_data);
}

/** @ingroup iface_gamescope_reshade */
static inline void *
gamescope_reshade_get_user_data(struct gamescope_reshade *gamescope_reshade)
{
	return wl_proxy_get_user_data((struct wl_proxy *) gamescope_reshade);
}

static inline uint32_t
gamescope_reshade_get_version(struct gamescope_reshade *gamescope_reshade)
{
	return wl_proxy_get_version((struct wl_proxy *) gamescope_reshade);
}

/**
 * @ingroup iface_gamescope_reshade
 */
static inline void
gamescope_reshade_destroy(struct gamescope_reshade *gamescope_reshade)
{
	wl_proxy_marshal_flags((struct wl_proxy *) gamescope_reshade,
			 GAMESCOPE_RESHADE_DESTROY, NULL, wl_proxy_get_version((struct wl_proxy *) gamescope_reshade), WL_MARSHAL_FLAG_DESTROY);
}

/**
 * @ingroup iface_gamescope_reshade
 *
 * The effect will be disabled to allow an opportunity to set uniform variables before enabling it.
 */
static inline void
gamescope_reshade_set_effect(struct gamescope_reshade *gamescope_reshade, const char *path)
{
	wl_proxy_marshal_flags((struct wl_proxy *) gamescope_reshade,
			 GAMESCOPE_RESHADE_SET_EFFECT, NULL, wl_proxy_get_version((struct wl_proxy *) gamescope_reshade), 0, path);
}

/**
 * @ingroup iface_gamescope_reshade
 *
 * Enables the effect that was previously loaded by set_effect.
 */
static inline void
gamescope_reshade_enable_effect(struct gamescope_reshade *gamescope_reshade)
{
	wl_proxy_marshal_flags((struct wl_proxy *) gamescope_reshade,
			 GAMESCOPE_RESHADE_ENABLE_EFFECT, NULL, wl_proxy_get_version((struct wl_proxy *) gamescope_reshade), 0);
}

/**
 * @ingroup iface_gamescope_reshade
 *
 * Set the value of a uniform variable. Can be called before or after enabling the effect.
 */
static inline void
gamescope_reshade_set_uniform_variable(struct gamescope_reshade *gamescope_reshade, const char *key, struct wl_array *value)
{
	wl_proxy_marshal_flags((struct wl_proxy *) gamescope_reshade,
			 GAMESCOPE_RESHADE_SET_UNIFORM_VARIABLE, NULL, wl_proxy_get_version((struct wl_proxy *) gamescope_reshade), 0, key, value);
}

/**
 * @ingroup iface_gamescope_reshade
 *
 * Disables the effect that was previously enabled by enable_effect.
 */
static inline void
gamescope_reshade_disable_effect(struct gamescope_reshade *gamescope_reshade)
{
	wl_proxy_marshal_flags((struct wl_proxy *) gamescope_reshade,
			 GAMESCOPE_RESHADE_DISABLE_EFFECT, NULL, wl_proxy_get_version((struct wl_proxy *) gamescope_reshade), 0);
}

#ifdef  __cplusplus
}
#endif

#endif
